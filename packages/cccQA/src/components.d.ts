/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ClButton {
        /**
          * Determines whether the disabled styling and behaviour is applied or not.
         */
        "disabled": boolean;
        /**
          * Determines whether the error styling is applied or not.
         */
        "error": boolean;
        /**
          * Name of the icon used in the button. If not set no icon wil be displayed.
         */
        "iconName"?: string;
        /**
          * The 'name' attribute of the 'input' element
         */
        "name": string;
        /**
          * Determines whether the processing styling is applied or not.
         */
        "processing": boolean;
        /**
          * Specifies whether the selected styling should be applied.
         */
        "selected": boolean;
        /**
          * Determines whether the small styling is applied or not.
         */
        "small": boolean;
        /**
          * Specifies the value of the type attribute the underlying button component should have.
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * Specifies the styling of the button.
         */
        "variant": 'primary' | 'secondary' | 'tertiary' | 'text';
    }
    interface ClChip {
        /**
          * Number that the chip displays. If the value is `null`, then no number is displayed
         */
        "counter": number;
        /**
          * Determines whether the disabled styling is applied or not
         */
        "disabled": boolean;
        /**
          * Determines whether the icon is displayed on the left or on the right
         */
        "iconLeft": boolean;
        /**
          * Name of the icon used in the button
         */
        "iconName"?: string;
        /**
          * Determines whether the chip is read-only or not
         */
        "readOnly": boolean;
        /**
          * Determines whether the chip has selected styling or not
         */
        "selected": boolean;
        /**
          * Determines whether the chip has a small of regular size
         */
        "small": boolean;
    }
    interface ClIcon {
        /**
          * Screenreader label
         */
        "ariaLabel": string;
        /**
          * FillColor of the icon
         */
        "fillColor": string;
        /**
          * Name of the icon, is used to lookup icon in sprite sheet
         */
        "name": string;
        /**
          * Determines the size of the icon component in REM
         */
        "size"?: number;
    }
    interface ClScrollWrapper {
        /**
          * Determines the max height of the scroll-wrapper component
         */
        "maxHeight"?: number;
        /**
          * Determines whether the scroll-bar should be persistent
         */
        "persistent": boolean;
        /**
          * Size of the thumb
         */
        "small": boolean;
        /**
          * Determines whether only the thumb should be shown, or also its background
         */
        "thumbOnly": boolean;
    }
}
declare global {
    interface HTMLClButtonElement extends Components.ClButton, HTMLStencilElement {
    }
    var HTMLClButtonElement: {
        prototype: HTMLClButtonElement;
        new (): HTMLClButtonElement;
    };
    interface HTMLClChipElement extends Components.ClChip, HTMLStencilElement {
    }
    var HTMLClChipElement: {
        prototype: HTMLClChipElement;
        new (): HTMLClChipElement;
    };
    interface HTMLClIconElement extends Components.ClIcon, HTMLStencilElement {
    }
    var HTMLClIconElement: {
        prototype: HTMLClIconElement;
        new (): HTMLClIconElement;
    };
    interface HTMLClScrollWrapperElement extends Components.ClScrollWrapper, HTMLStencilElement {
    }
    var HTMLClScrollWrapperElement: {
        prototype: HTMLClScrollWrapperElement;
        new (): HTMLClScrollWrapperElement;
    };
    interface HTMLElementTagNameMap {
        "cl-button": HTMLClButtonElement;
        "cl-chip": HTMLClChipElement;
        "cl-icon": HTMLClIconElement;
        "cl-scroll-wrapper": HTMLClScrollWrapperElement;
    }
}
declare namespace LocalJSX {
    interface ClButton {
        /**
          * Determines whether the disabled styling and behaviour is applied or not.
         */
        "disabled"?: boolean;
        /**
          * Determines whether the error styling is applied or not.
         */
        "error"?: boolean;
        /**
          * Name of the icon used in the button. If not set no icon wil be displayed.
         */
        "iconName"?: string;
        /**
          * The 'name' attribute of the 'input' element
         */
        "name"?: string;
        /**
          * Determines whether the processing styling is applied or not.
         */
        "processing"?: boolean;
        /**
          * Specifies whether the selected styling should be applied.
         */
        "selected"?: boolean;
        /**
          * Determines whether the small styling is applied or not.
         */
        "small"?: boolean;
        /**
          * Specifies the value of the type attribute the underlying button component should have.
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Specifies the styling of the button.
         */
        "variant"?: 'primary' | 'secondary' | 'tertiary' | 'text';
    }
    interface ClChip {
        /**
          * Number that the chip displays. If the value is `null`, then no number is displayed
         */
        "counter"?: number;
        /**
          * Determines whether the disabled styling is applied or not
         */
        "disabled"?: boolean;
        /**
          * Determines whether the icon is displayed on the left or on the right
         */
        "iconLeft"?: boolean;
        /**
          * Name of the icon used in the button
         */
        "iconName"?: string;
        /**
          * Gets emitted on a click on the chip. An object that contains the properties 'id' and 'selected' is emitted. The latter indicates the new 'selected' value after the click event on the chip element.
         */
        "onClicked"?: (event: CustomEvent<{ id: string; selected: boolean }>) => void;
        /**
          * Gets emitted on a click on the icon in the chip. An object that contains the properties 'id' and 'selected' is emitted. The latter indicates the new 'selected' value after the click event on the chip element.
         */
        "onIconClicked"?: (event: CustomEvent<{ id: string; selected: boolean }>) => void;
        /**
          * Determines whether the chip is read-only or not
         */
        "readOnly"?: boolean;
        /**
          * Determines whether the chip has selected styling or not
         */
        "selected"?: boolean;
        /**
          * Determines whether the chip has a small of regular size
         */
        "small"?: boolean;
    }
    interface ClIcon {
        /**
          * Screenreader label
         */
        "ariaLabel"?: string;
        /**
          * FillColor of the icon
         */
        "fillColor"?: string;
        /**
          * Name of the icon, is used to lookup icon in sprite sheet
         */
        "name"?: string;
        /**
          * Determines the size of the icon component in REM
         */
        "size"?: number;
    }
    interface ClScrollWrapper {
        /**
          * Determines the max height of the scroll-wrapper component
         */
        "maxHeight"?: number;
        /**
          * Determines whether the scroll-bar should be persistent
         */
        "persistent"?: boolean;
        /**
          * Size of the thumb
         */
        "small"?: boolean;
        /**
          * Determines whether only the thumb should be shown, or also its background
         */
        "thumbOnly"?: boolean;
    }
    interface IntrinsicElements {
        "cl-button": ClButton;
        "cl-chip": ClChip;
        "cl-icon": ClIcon;
        "cl-scroll-wrapper": ClScrollWrapper;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cl-button": LocalJSX.ClButton & JSXBase.HTMLAttributes<HTMLClButtonElement>;
            "cl-chip": LocalJSX.ClChip & JSXBase.HTMLAttributes<HTMLClChipElement>;
            "cl-icon": LocalJSX.ClIcon & JSXBase.HTMLAttributes<HTMLClIconElement>;
            "cl-scroll-wrapper": LocalJSX.ClScrollWrapper & JSXBase.HTMLAttributes<HTMLClScrollWrapperElement>;
        }
    }
}
